[build-system]
requires = [
    "setuptools>=61",
    "wheel",
    "setuptools-scm",
]

[project]
name = "circuitpython-mocks"
requires-python = ">=3.7"
description = "A library of mock structures for soft-testing CircuitPython-based projects."
readme = "README.rst"
authors = [
    {name = "Brendan Doherty", email = "2bndy5@gmail.com"}
]
keywords = [
    "blinka",
    "circuitpython",
    "raspberrypi",
    "driver",
    "test",
    "mock",
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Hardware",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
Documentation = "https://circuitpython-mocks.readthedocs.io"
Source =  "https://github.com/2bndy5/CircuitPython-mocks"
Tracker = "https://github.com/2bndy5/CircuitPython-mocks/issues"

[tool.setuptools]
packages = ["circuitpython_mocks"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
optional-dependencies = {tests = {file = ["tests/requirements.txt"]}}

[tool.setuptools_scm]
# It would be nice to include the commit hash in the version, but that
# can't be done in a PEP 440-compatible way.
version_scheme= "no-guess-dev"
# Test PyPI does not support local versions.
local_scheme = "no-local-version"
fallback_version = "0.0.0"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vv"
testpaths = ["tests"]
log_level = "DEBUG"
log_format = "%(levelname)s\t%(name)s: %(message)s"

[tool.mypy]
show_error_codes = true
show_column_numbers = true

[tool.coverage]
[tool.coverage.run]
dynamic_context = "test_function"

[tool.coverage.json]
pretty_print = true

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "def __repr__",
]
